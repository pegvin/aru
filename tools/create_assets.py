#!/usr/bin/python

# Requires Python v3 Interpreter

# Read all the files in 'data', and create assets.inl with all the data.  For
# text file, we try to keep the data as a string, for binary files we store it
# into a uint8_t array.

import os
import sys
import subprocess
from collections import namedtuple

CWD = os.getcwd()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)

if CWD != PROJECT_ROOT:
	print("Error: Run the script from project root, i.e.", PROJECT_ROOT)
	sys.exit(-1)

TYPES = {
	"ini":    { "text": True,  "Disabled": False },
	"json":   { "text": True,  "Disabled": False }
}

# Parse Disabled Stuff, --disabled=csv,glsl
for argument in sys.argv:
	if argument.startswith("--disabled="):
		argument = argument.replace("--disabled=", '')
		argument = argument.split(',')
		for item in argument:
			if item in TYPES:
				TYPES[item]["Disabled"] = True

		break;

GROUPS = [
	'themes', 'languages'
]

TEMPLATE = '{{\n\t.path = "{path}",\n\t.size = {size},\n\t.data = {data}\n}},\n\n'
File = namedtuple('File', 'path name data size')

HEADER = "/* This file is autogenerated by tools/create_assets.py */"

def list_files(group):
	ret = []
	for root, dirs, files in os.walk("data/%s" % group):
		for f in files:
			if any(f.endswith('.' + x) for x in TYPES):
				ret.append(os.path.join(root, f))

	return sorted(ret, key=lambda x: x.upper())

def encode_str(data):
	data = data.decode()

	# Just Replace Platform Independent New Line Feeds ( Windows = \r\n, Mac = \r, Unix = \n ) To \n
	data = data.replace('\r\n', '\n').replace('\r', '\n')

	ret = '"'
	for c in data:
		if c == '\n':
			ret += '\\n'
			continue

		if c == '"': c = '\\"'
		if c == '\\': c = '\\\\'
		ret += c

	ret += '"'
	return ret

def create_file(f):
	data = open(f, 'rb').read()
	size = len(data)
	name = f.replace('/', '_').replace('.', '_').replace('-', '_')
	ext = f.split(".")[-1]

	if TYPES[ext]['Disabled']:
		return False;

	size += 1 # So that we NULL terminate the string.
	data = encode_str(data)

	return File(f, name, data, size)

for group in GROUPS:
	files = []

	for f in list_files(group):
		file = create_file(f)
		if file:
			files.append(file)

	if not files:
		continue

	out = open("src/assets/%s.inl" % group, "w")

	out.write(HEADER)
	out.write("\n\n")

	for f in files:
		out.write(TEMPLATE.format(**f._asdict()))

	out.write("\n\n")
